function diferencial_evolutivo_puma560()
    % Parámetros del algoritmo DE
    N = 50; % Tamaño de la población
    G_max = 1000; % Número máximo de generaciones
    F = 0.8; % Factor de escala
    CR = 0.9; % Tasa de cruce
    q_min = [-pi, -pi/2, -pi, -pi, -pi, -pi]; % Límite inferior de los ángulos articulares
    q_max = [pi, pi/2, pi, pi, pi, pi]; % Límite superior de los ángulos articulares

    % Punto objetivo (posición deseada del efector final en mm)
    P_obj = [500; 300; 200]; 

    % Inicializar la población aleatoriamente
    population = initialize_population(N, q_min, q_max);

    % Evaluar la población inicial
    fitness = evaluate_population(population, P_obj);

    % Métricas de tiempo
    tic; % Iniciar medición del tiempo total
    generation_times = zeros(G_max, 1); % Tiempo por generación

    % Evolución
    for G = 1:G_max
        t_start = tic; % Medir tiempo de inicio de la generación

        new_population = zeros(size(population));
        for i = 1:N
            % Seleccionar tres individuos aleatorios distintos de i
            indices = randperm(N, 4);
            indices(indices == i) = [];
            r1 = indices(1); r2 = indices(2); r3 = indices(3);

            % Mutación
            mutant = population(r1, :) + F * (population(r2, :) - population(r3, :));
            mutant = clamp(mutant, q_min, q_max);

            % Cruce
            trial = crossover(population(i, :), mutant, CR);

            % Evaluar el vector de prueba
            trial_fitness = evaluate_individual(trial, P_obj);

            % Selección
            if trial_fitness < fitness(i)
                new_population(i, :) = trial;
                fitness(i) = trial_fitness;
            else
                new_population(i, :) = population(i, :);
            end
        end

        % Actualizar población
        population = new_population;

        % Registrar tiempo de la generación
        generation_times(G) = toc(t_start);

        % Mostrar el mejor fitness por generación
        disp(['Generación ', num2str(G), ': Mejor fitness = ', num2str(min(fitness))]);
    end

    % Calcular tiempo total de ejecución
    total_time = toc;

    % Obtener el mejor individuo
    [~, best_idx] = min(fitness);
    best_solution = population(best_idx, :);

    % Calcular posición del efector final con la mejor solución
    T_final = calcular_transformacion_total(best_solution(1), best_solution(2), ...
                                            best_solution(3), best_solution(4), ...
                                            best_solution(5), best_solution(6));
    P_final = T_final(1:3, 4);

    % Métricas
    error_posicional = norm(P_final - P_obj);

    % Mostrar resultados
    disp('Mejor solución encontrada (ángulos articulares en radianes):');
    disp(best_solution);

    disp('Posición del efector final (mm):');
    disp(P_final);

    disp(['Error posicional (mm): ', num2str(error_posicional)]);
    disp(['Tiempo total de ejecución (s): ', num2str(total_time)]);
    disp(['Tiempo promedio por generación (s): ', num2str(mean(generation_times))]);
end

% Función para inicializar la población
function population = initialize_population(N, q_min, q_max)
    population = zeros(N, length(q_min));
    for i = 1:length(q_min)
        population(:, i) = q_min(i) + (q_max(i) - q_min(i)) * rand(N, 1);
    end
end

% Función para evaluar toda la población
function fitness = evaluate_population(population, P_obj)
    N = size(population, 1);
    fitness = zeros(N, 1);
    for i = 1:N
        fitness(i) = evaluate_individual(population(i, :), P_obj);
    end
end

% Función para evaluar un individuo
function fitness = evaluate_individual(individual, P_obj)
    T_total = calcular_transformacion_total(individual(1), individual(2), ...
                                            individual(3), individual(4), ...
                                            individual(5), individual(6));
    P_actual = T_total(1:3, 4);
    fitness = norm(P_actual - P_obj); % Distancia euclidiana
end

% Función para acotar los valores dentro de los límites
function clamped = clamp(values, q_min, q_max)
    clamped = max(q_min, min(q_max, values));
end

% Función de cruce
function trial = crossover(target, mutant, CR)
    trial = target;
    for j = 1:length(target)
        if rand <= CR || j == randi(length(target))
            trial(j) = mutant(j);
        end
    end
end

% Función para calcular la transformación total del efector final
function T_total = calcular_transformacion_total(q_1, q_2, q_3, q_4, q_5, q_6)
    % Definir las matrices de transformación
    A_1 = [-sin(q_1), 0, cos(q_1),  0;
           cos(q_1),  0, sin(q_1),  0;
           0,        -1,    0    ,  0;
           0,         0,    0    ,  1];

    A_2 = [cos(q_2), -sin(q_2), 0, 431.8*cos(q_2);
           sin(q_2),  cos(q_2), 0, 431.8*sin(q_2);
           0       ,         0, 1, 149.09;
           0       ,         0, 0, 1];

    A_3 = [-sin(q_3), 0 ,cos(q_3),  20.32*sin(q_3);
            cos(q_3), 0 ,sin(q_3), -20.32*cos(q_3);
            0       , 1 ,       0, 0;
            0       , 0 ,       0, 1];

    A_4 = [cos(q_4),  0,  -sin(q_4), 0;
           sin(q_4),  0,   cos(q_4), 0;
           0       , -1,          0, 433.07;
           0       ,  0,          0,  1];

    A_5 = [cos(q_5),  0,  sin(q_5), 0;
           sin(q_5),  0, -cos(q_5), 0;
           0,         1,         0, 0;
           0,         0,         0, 1];

    A_6 = [cos(q_6), -sin(q_6), 0, 0;
           sin(q_6),  cos(q_6), 0, 0;
           0,        0,        1, 56.25;
           0,        0,        0, 1];

    % Multiplicación progresiva de las matrices
    T_total = A_1 * A_2 * A_3 * A_4 * A_5 * A_6;
end
